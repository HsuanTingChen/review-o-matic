#!/usr/bin/env python3

from reviewer import Reviewer
from gerrit import Gerrit, GerritRevision, GerritMessage

import argparse
import datetime
import random
import sys
import time

class Troll(object):
  def __init__(self, url, args):
    self.url = url
    self.args = args
    self.gerrit = Gerrit(url)
    self.tag = 'autogenerated:review-o-matic'
    self.swag = ['Rocky Mountain Cold', 'Frrrresh', 'Crisper Than Cabbage',
                 'Awesome', 'Ahhhmazing', 'Cool As A Cucumber',
                 'Gold Jerry! Gold!', 'Most Excellent']


  def handle_successful_review(self, change):
    print('Adding successful review for change {}'.format(change.url()))

    msg = '''
      -- Automated message --
      This change has been certified {} by review-o-matic!
      Details available at https://github.com/atseanpaul/review-o-matic
    '''.format(random.choice(self.swag))
    self.gerrit.review(change, self.tag, msg, 1, True)


  def handle_unsuccessful_review(self, change, prefix, result):
    vote = 0
    notify = False

    msg = '''
      -- Automated message --
      This patch differs from the source commit.
    '''

    if prefix == 'UPSTREAM':
      vote = -1
      notify = True
      msg += '''
        Since this is an UPSTREAM labeled patch, it shouldn't. Either this
        reviewing script is incorrect (totally possible, pls send patches!),
        or something changed when this was backported. If the backport
        required changes, please consider using the BACKPORT label with a
        description of you downstream changes.
      '''
    else:
      msg += '''
        This is expected, and this message is posted to make reviewing
        backports easier.
      '''

    msg += '''
      Below is a diff of the upstream patch referenced in this commit message,
      vs this patch.
      ---------------
      '''

    for l in result:
      msg += '{}\n'.format(l)

    msg += '''

      ---------------
      Details available at https://github.com/atseanpaul/review-o-matic
    '''

    print('Adding unsuccessful review (vote={}) for change {}'.format(vote,
          change.url()))

    self.gerrit.review(change, self.tag, msg, vote, notify)


  def get_changes(self, prefix):
    message = '{}: drm'.format(prefix)
    after = datetime.date.today() - datetime.timedelta(days=30)
    changes = self.gerrit.query_changes(status='open', message=message,
                                        after=after)
    return changes


  def process_changes(self, prefix, changes):
    rev = Reviewer(git_dir=self.args.git_dir, verbose=self.args.verbose,
                   chatty=self.args.chatty)
    num_changes = len(changes)
    cur_change = 1
    line_feed = False
    for c in changes:
      if self.args.verbose:
        sys.stdout.write('{}Processing change {}/{}'.format(
                            '\r' if line_feed else '',
                            cur_change, num_changes))
        cur_change += 1

      line_feed = True

      if not c.subject.startswith(prefix) or 'FROMLIST' in c.subject:
        continue

      skip = False
      for m in c.messages:
        if m.tag == self.tag and m.revision_num == c.current_revision.number:
          skip = True

      if skip:
        continue

      line_feed = False
      print('')

      gerrit_patch = rev.get_commit_from_remote('cros', c.current_revision.ref)

      upstream_sha = rev.get_cherry_pick_sha_from_patch(gerrit_patch)
      if not upstream_sha:
        sys.stderr.write('\nERROR: failed to get sha for "{}" ({})\n'.format(
          c.subject, c.url()))
        continue

      try:
        upstream_patch = rev.get_commit_from_sha(upstream_sha)
      except:
        sys.stderr.write(
            '\nERROR: failed to get commit for sha "{}" ({})\n'.format(
                c.subject, c.url()))
        continue

      result = rev.compare_diffs(upstream_patch, gerrit_patch)
      if len(result) == 0:
        self.handle_successful_review(c)
        continue

      self.handle_unsuccessful_review(c, prefix, result)

    if self.args.verbose:
      print('')


  def run(self):
    prefixes = ['UPSTREAM', 'BACKPORT', 'FROMGIT']
    for p in prefixes:
      changes = self.get_changes(p)
      if self.args.verbose:
        print('{} changes for prefix {}'.format(len(changes), p))
      self.process_changes(p, changes)


def main():
  parser = argparse.ArgumentParser(description='Troll gerrit reviews')
  parser.add_argument('--git-dir', default=None, help='Path to git directory')
  parser.add_argument('--verbose', help='print commits', action='store_true')
  parser.add_argument('--chatty', help='print diffs', action='store_true')
  parser.add_argument('--daemon', action='store_true',
    help='Run in daemon mode, for continuous trolling')
  args = parser.parse_args()

  while True:
    troll = Troll('https://chromium-review.googlesource.com', args)
    troll.run()
    if not args.daemon:
      break
    if args.verbose:
      print('Finished! Going to sleep until next run')
    time.sleep(120)

if __name__ == '__main__':
  sys.exit(main())
